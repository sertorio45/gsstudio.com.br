{"file":"defineOgImage-CR7JfCra.js","mappings":";;;;;AAaO,SAAS,aAAa,MAAM;AACjC,SAAO,KAAK,MAAM,GAAG,EAAE,CAAC;AAC1B;AACO,SAAS,8BAA8B;AAC5C,QAAM,EAAE,OAAO,IAAK,IAAG,iBAAgB;AACvC,QAAM,qBAAqB;AAAA,IACzBA,aAAkB;AAAA,MAChB,QAAQ,OAAO;AAAA,QACb,OAAO,SAAQ,+BAAO,eAAc,CAAE,CAAA,EAAE,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,qBAAqB,IAAI,GAAG,KAAK,CAAC;AAAA,MACnG;AAAA,IACP,CAAK;AAAA,EACL;AACE,SAAO,CAAC,SAAS;AACf,WAAO,KAAK,CAAA,GAAI,GAAG,mBAAmB;AAAA;AAAA,MAEpC,YAAY,qBAAqB,aAAa,IAAI,CAAC,GAAG,IAAI,OAAO;AAAA,IACvE,EAAM,QAAS,CAAA;AAAA,EACf;AACA;ACzBO,SAAS,cAAc,WAAW,IAAI;;AAG3C,QAAM,UAAU;AAChB,QAAM,mBAAmB,QAAQ,WAAW,qBAAqB,CAAA;AACjE,QAAM,QAAQ;AACd,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,mBAAmB;AACzB,QAAM,aAAa,iBAAiB,QAAQ,EAAE;AAC9C,MAAI,CAAC,cAAY,yBAAQ,eAAR,mBAAoB,MAAM,QAAQ,WAAlC,mBAA0C,eAA1C,mBAAsD,aAAY,SAAS,OAAO,eAAe,eAAe,eAAe,OAAO;AACrJ,qBAAiB,QAAQ,CAAC,MAAM;AAC9B,QAAE,QAAO;AAAA,IACf,CAAK;AACD,YAAQ,WAAW,oBAAoB;AACvC;AAAA,EACD;AACD,QAAM,EAAE,aAAa;AACrB,QAAM,UAAU,iBAAiB,KAAK;AAAA,IACpC,GAAG;AAAA,EACP,GAAK;AAAA,IACD,WAAW,SAAS;AAAA,EACrB,CAAA,CAAC;AACF,MAAI,MAAM;AACR,YAAQ,SAAS,MAAM;AACzB,QAAM,kBAAkB,iBAAiB,KAAK,cAAc,QAAQ,GAAG,cAAc,UAAU,GAAG,QAAQ,CAAC;AAC3G,MAAI,gBAAgB,KAAK;AACvB,sBAAkB,MAAM,SAAS,iBAAiB,QAAQ,UAAU;AAAA,EACxE,OAAS;AACL,UAAM,OAAO,eAAe,UAAU,eAAe;AACrD,QAAI,YAAY;AACd,mBAAa,gBAAe,GAAI,qBAAqB,IAAI;AAC3D,sBAAkB,MAAM,SAAS,iBAAiB,QAAQ,UAAU;AAAA,EACrE;AACH;","names":["createRadixRouter"],"sources":["../../../../node_modules/nuxt-og-image/dist/runtime/nitro/util/kit.js","../../../../node_modules/nuxt-og-image/dist/runtime/nuxt/composables/defineOgImage.js"],"sourcesContent":["import { useRuntimeConfig } from \"#imports\";\nimport { defu } from \"defu\";\nimport { hash } from \"ohash\";\nimport { createRouter as createRadixRouter, toRouteMatcher } from \"radix3\";\nimport { withoutBase, withoutTrailingSlash } from \"ufo\";\nexport function fetchIsland(e, component, props) {\n  const hashId = hash([component, props]);\n  return e.$fetch(`/__nuxt_island/${component}_${hashId}.json`, {\n    params: {\n      props: JSON.stringify(props)\n    }\n  });\n}\nexport function withoutQuery(path) {\n  return path.split(\"?\")[0];\n}\nexport function createNitroRouteRuleMatcher() {\n  const { nitro, app } = useRuntimeConfig();\n  const _routeRulesMatcher = toRouteMatcher(\n    createRadixRouter({\n      routes: Object.fromEntries(\n        Object.entries(nitro?.routeRules || {}).map(([path, rules]) => [withoutTrailingSlash(path), rules])\n      )\n    })\n  );\n  return (path) => {\n    return defu({}, ..._routeRulesMatcher.matchAll(\n      // radix3 does not support trailing slashes\n      withoutBase(withoutTrailingSlash(withoutQuery(path)), app.baseURL)\n    ).reverse());\n  };\n}\n","import { useNuxtApp, useRequestEvent, useRoute } from \"#imports\";\nimport { defu } from \"defu\";\nimport { appendHeader } from \"h3\";\nimport { createNitroRouteRuleMatcher } from \"../../nitro/util/kit.js\";\nimport { getOgImagePath, separateProps, useOgImageRuntimeConfig } from \"../../shared.js\";\nimport { createOgImageMeta, normaliseOptions } from \"../utils.js\";\nexport function defineOgImage(_options = {}) {\n  if (!import.meta.server)\n    return;\n  const nuxtApp = useNuxtApp();\n  const ogImageInstances = nuxtApp.ssrContext._ogImageInstances || [];\n  const route = useRoute();\n  const basePath = route.path || \"/\";\n  const routeRuleMatcher = createNitroRouteRuleMatcher();\n  const routeRules = routeRuleMatcher(basePath).ogImage;\n  if (!_options || nuxtApp.ssrContext?.event.context._nitro?.routeRules?.ogImage === false || typeof routeRules !== \"undefined\" && routeRules === false) {\n    ogImageInstances.forEach((e) => {\n      e.dispose();\n    });\n    nuxtApp.ssrContext._ogImageInstances = void 0;\n    return;\n  }\n  const { defaults } = useOgImageRuntimeConfig();\n  const options = normaliseOptions(defu({\n    ..._options\n  }, {\n    component: defaults.component\n  }));\n  if (route.query)\n    options._query = route.query;\n  const resolvedOptions = normaliseOptions(defu(separateProps(_options), separateProps(routeRules), defaults));\n  if (resolvedOptions.url) {\n    createOgImageMeta(null, options, resolvedOptions, nuxtApp.ssrContext);\n  } else {\n    const path = getOgImagePath(basePath, resolvedOptions);\n    if (import.meta.prerender)\n      appendHeader(useRequestEvent(), \"x-nitro-prerender\", path);\n    createOgImageMeta(path, options, resolvedOptions, nuxtApp.ssrContext);\n  }\n}\n"],"version":3}